# -*- mode: snippet -*-
# name: halogen-component
# key: haco
# expand-env: ((yas-indent-line 'fixed))
# --
module Component.$1 where

import Prelude

import Halogen as H
import Halogen.HTML as HH
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties as HP

$0
type State = Boolean

data Query a = Toggle a

type Input = Unit

data Message = Toggled Boolean

ui :: forall eff. H.Component HH.HTML Query Input Message (Aff eff)
ui =
  H.component
    { initialState: const initialState
    , render
    , eval
    , receiver: const Nothing
    }
  where

  initialState :: State
  initialState = false

  render :: State -> H.ComponentHTML Query
  render state =
    HH.button
      [ HP.title label
      , HE.onClick (HE.input_ Toggle)
      ]
      [ HH.text label]
    where
      label = if state then "On" else "Off"

  eval :: Query ~> H.ComponentDSL State Query Message (Aff eff)
  eval = case _ of
    Toggle next -> do
      state <- H.get
      let nextState = not state
      H.put nextState
      H.raise $ Toggled nextState
      pure next
    IsOn reply -> do
      state <- H.get
      pure $ reply state
