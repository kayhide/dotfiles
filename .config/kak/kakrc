source "%val{config}/plugins/plug.kak/rc/plug.kak"

plug "ul/kak-lsp"
plug "alexherbo2/prelude.kak"
plug "alexherbo2/terminal-mode.kak"
plug "alexherbo2/connect.kak"
plug "andreyorst/fzf.kak"


add-highlighter global/ show-matching
add-highlighter global/ wrap

hook global WinCreate ^[^*]+$ %{
    add-highlighter window/ number-lines -hlcursor
}

map global user f ': fzf-mode<ret>' -docstring 'fzf'
map global user l ': enter-user-mode<space>lsp<ret>' -docstring 'lsp'
map global user F ': format<ret>' -docstring 'format'

declare-user-mode space
map global normal <space> ': enter-user-mode<space>space<ret>'
map global space <space> <space> -docstring 'remove all sels except main'
map global space <semicolon> ': comment-line<ret>' -docstring '(un)comment selected lines'

declare-user-mode space-buffer
map global space b ': enter-user-mode<space>space-buffer<ret>' -docstring 'buffer'
map global space-buffer b ': buffer<space>' -docstring 'open buffer'
map global space-buffer d ': delete-buffer<ret>' -docstring 'delete buffer'
map global space-buffer R ': edit!<ret>' -docstring 'reload buffer'

declare-user-mode space-file
map global space f ': enter-user-mode<space>space-file<ret>' -docstring 'file'
map global space-file f ': find-file<space>' -docstring 'find file'
map global space-file d ': find-directory<space>' -docstring 'find directory'
map global space-file s ': write<ret>' -docstring 'save file'

declare-user-mode space-file-e
map global space-file e ': enter-user-mode<space>space-file-e<ret>' -docstring 'file-e'
map global space-file-e d ': edit-kakrc<ret>' -docstring 'edit kakrc'

declare-user-mode space-terminal
map global space t ': enter-user-mode<space>space-terminal<ret>' -docstring 'terminal'
map global space-terminal t ': $<space>kitty<ret>' -docstring 'open kitty'
map global space-terminal a ': $<space>kitty :a<ret>' -docstring 'open new client'
map global space-terminal r ': $<space>kitty ranger --selectfile "%val{buffile}" <ret>' -docstring 'launch ranger'
map global space-terminal g ': $<space>kitty tig<ret>' -docstring 'launch tig'

declare-user-mode space-error
map global space e ': enter-user-mode<space>space-error<ret>' -docstring 'error'
map global space-error n '<esc>: lsp-find-error --include-warnings<ret>' -docstring 'find next error or warning'
map global space-error p '<esc>: lsp-find-error --include-warnings --previous<ret>' -docstring 'find previous error or warning'
map global space-error N '<esc>: lsp-find-error<ret>' -docstring 'find next error'
map global space-error P '<esc>: lsp-find-error --previous<ret>' -docstring 'find previous error'

declare-user-mode space-project
map global space p ': enter-user-mode<space>space-project<ret>' -docstring 'project'
map global space-project a '<esc>: alt<ret>' -docstring 'edit alternative file'


def find-file -params 1 -shell-script-candidates %{ fd --type f } %{
    edit %arg{1}
}

def find-directory -hidden -params 1 -shell-script-candidates %{ fd --type d } %{
    echo %arg{1}
}

def edit-kakrc -docstring 'edit kakrc' %{
    edit! "%val{config}/kakrc"
}

# Use system clipboard

hook global NormalKey y|d|c %{
    nop %sh{ printf "%s" "$kak_main_reg_dquote" | xsel --clipboard --input }
}

define-command pull-from-xsel %{
    evaluate-commands %sh{
        printf "set-register '%s' " '"'
        echo -n '%='
        xsel --clipboard --output | sed "s/=/==/g"
        echo -n '='
    }
}
map global normal p ': pull-from-xsel<ret>p'
map global normal P ': pull-from-xsel<ret>P'



# Seach case insensitive
map global normal / /(?i)
map global normal <a-/> <a-/>(?i)

# Local configs

source "%val{config}/sh.kak"
source "%val{config}/purescript.kak"
source "%val{config}/psc-ide.kak"
# source "%val{config}/reload-kakrc.kak"

# Nix

hook global WinSetOption filetype=nix %{
    set-option window tabstop 2
    set-option window indentwidth 2
}

# Yaml

hook global WinSetOption filetype=yaml %{
    set-option window tabstop 2
    set-option window indentwidth 2
}

# JavaScript / Json

hook global WinSetOption filetype=javascript|json %{
    set-option window tabstop 2
    set-option window indentwidth 2
    set-option window formatcmd "prettier --stdin-filepath=%val{buffile}"
}

# Css

hook global WinSetOption filetype=css %{
    set-option window tabstop 2
    set-option window indentwidth 2
    set-option window formatcmd "prettier --stdin-filepath=%val{buffile}"
}

# Ruby

hook global WinSetOption filetype=ruby %{
    set-option window tabstop 2
    set-option window indentwidth 2
}

# Rust

hook global WinSetOption filetype=rust %{
    set-option window tabstop 4
    set-option window indentwidth 4
    set-option window formatcmd "rustfmt"
    lsp-enable-window
}

# Haskell

hook global WinSetOption filetype=haskell %{
    set-option window tabstop 2
    set-option window indentwidth 2
}

# PureScript

declare-user-mode user-purescript
declare-user-mode user-purescript-import
hook global WinSetOption filetype=purescript %{
    set-option window tabstop 2
    set-option window indentwidth 2
    set-option window formatcmd "purty %val{buffile}"
    lsp-enable-window

    set-option buffer comment_line '--'
    set-option buffer comment_block_begin '{-'
    set-option buffer comment_block_end '-}'

    map window user m ': enter-user-mode<space>user-purescript<ret>'
    map window user-purescript i ': enter-user-mode<space>user-purescript-import<ret>'
    map window user-purescript-import a ': psc-ide-add-import<ret>'
}

set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /home/kayhide/tmp/kak-lsp.log"

