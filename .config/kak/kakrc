source "%val{config}/plugins/plug.kak/rc/plug.kak"

plug "ul/kak-lsp"
plug "alexherbo2/prelude.kak"
plug "alexherbo2/terminal-mode.kak"
plug "alexherbo2/connect.kak"
plug "andreyorst/smarttab.kak"


add-highlighter global/ show-matching

hook global WinCreate ^[^*]+$ %{
    add-highlighter window/ number-lines -hlcursor
}

hook global ModuleLoaded smarttab %{
}


map global user F ': format<ret>' -docstring 'format'

declare-user-mode space
map global normal <space> ': enter-user-mode<space>space<ret>'
map global space <semicolon> <space> -docstring 'remove all sels except main'
map global space <a-semicolon> <a-space> -docstring 'remove main sel'
map global space l ': enter-user-mode<space>lsp<ret>' -docstring 'lsp'

declare-user-mode space-buffer
map global space b ': enter-user-mode<space>space-buffer<ret>' -docstring 'buffer'
map global space-buffer b ': buffer<space>' -docstring 'open buffer'
map global space-buffer d ': delete-buffer<ret>' -docstring 'delete buffer'
map global space-buffer R ': edit!<ret>' -docstring 'reload buffer'

declare-user-mode space-file
map global space f ': enter-user-mode<space>space-file<ret>' -docstring 'file'
map global space-file f ': find-file<space>' -docstring 'find file'
map global space-file d ': find-directory<space>' -docstring 'find directory'
map global space-file s ': write<ret>' -docstring 'save file'

declare-user-mode space-file-e
map global space-file e ': enter-user-mode<space>space-file-e<ret>' -docstring 'file-e'
map global space-file-e d ': edit-kakrc<ret>' -docstring 'edit kakrc'

declare-user-mode space-terminal
map global space t ': enter-user-mode<space>space-terminal<ret>' -docstring 'terminal'
map global space-terminal t ': $<space>kitty<ret>' -docstring 'open kitty'
map global space-terminal a ': $<space>kitty :a<ret>' -docstring 'open new client'

declare-user-mode space-error
map global space e ': enter-user-mode<space>space-error<ret>' -docstring 'error'
map global space-error n '<esc>: lsp-find-error<ret>' -docstring 'find next error'
map global space-error p '<esc>: lsp-find-error --previous<ret>' -docstring 'find previous error'


def find-file -params 1 -shell-script-candidates %{ fd --type f } %{
    edit %arg{1}
}

def find-directory -hidden -params 1 -shell-script-candidates %{ fd --type d } %{
    echo %arg{1}
}

def edit-kakrc -docstring 'edit kakrc' %{
    edit! "%val{config}/kakrc"
}

source "~/ghq/github.com/mawww/kakoune/rc/filetype/purescript.kak"

declare-user-mode user-purescript
declare-user-mode user-purescript-import
hook global WinSetOption filetype=purescript %{
    set-option window formatcmd "purty %val{buffile}"
    lsp-enable-window

    map window user m ': enter-user-mode<space>user-purescript<ret>'
    map window user-purescript i ': enter-user-mode<space>user-purescript-import<ret>'
    map window user-purescript-import a ': psc-ide-add-import<ret>'
}

set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /home/kayhide/kak-lsp.log"


define-command psc-ide-add-import -docstring "add import" -params 0.. %{
    evaluate-commands %sh{
        identifier="${kak_selection##*.}"
        qualifier="$(echo "$kak_selection" |sed -n "s/\.[^\.]\+$//p")"
        echo $1 >> /home/kayhide/tmp/hoge
        echo psc-ide-cli "$kak_buffile" "$identifier" "$qualifier" "$1" >> /home/kayhide/tmp/hoge
        res="$(psc-ide-cli "$kak_buffile" "$identifier" "$qualifier" "$1")"
        if [[ -z $res ]]; then
            printf "%s\n" "echo OK"
        else
            printf "menu"
            for x in $res; do
                printf " %s %s" "$x" %{ psc-ide-add-import "$x" }
            done
        fi
    }
}


